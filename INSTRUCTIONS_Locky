//1.) Structure de base du dossier (qu'on changerra selon nos besoins)

 - app/
    ----- models/
    ---------- bear.js  // our bear model
    - node_modules/     // created by npm. holds our dependencies/packages
    - package.json      // define all our node app and dependencies
    - server.js         // configure our application and create routes


//2.) Editons notre package.json

//What do these packages do? express is the Node framework. mongoose is the ORM we will use to communicate with our MongoDB database. body-parser will let us pull POST content from our HTTP request so that we can do things like create a bear. 


{
    "name": "node-api",
    "main": "server.js",
    "dependencies": {
        "express": "~4.0.0",
        "mongoose": "~3.6.13",
        "body-parser": "~1.0.1"
    }
}

//3.) Installons notre Node Packages (dans le root du dossier, au meme niveau que le fichier package.json) via le terminal :

npm install

//npm will now pull in all the packages defined into a node_modules folder in our project. 
//npm is Node's package manager that will bring in all the packages we defined in package.json
//Simple and easy. Now that we have our packages, let's go ahead and use them when we set up our API. 




//4.) Mettons en place notre server, editons "server.js" :

// server.js

// BASE SETUP
// =============================================================================

// call the packages we need
var express    = require('express');        // call express
var app        = express();                 // define our app using express
var bodyParser = require('body-parser');

// configure app to use bodyParser()
// this will let us get the data from a POST
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

var port = process.env.PORT || 8080;        // set our port

// ROUTES FOR OUR API
// =============================================================================
var router = express.Router();              // get an instance of the express Router

// test route to make sure everything is working (accessed at GET http://localhost:8080/api)
router.get('/', function(req, res) {
    res.json({ message: 'hooray! welcome to our api!' });   
});

// more routes for our API will happen here

// REGISTER OUR ROUTES -------------------------------
// ATTENTION ==> all of our routes will be prefixed with "/api" (for the moment !!!) 

app.use('/api', router);

// START THE SERVER
// =============================================================================
app.listen(port);
console.log('Magic happens on port ' + port);

//5.)Testons notre server

node server.js

//You should see your Node app start up and Express will create a server. 

//6.) Testons maintenant notre API avec le logiciel "Postman" (ou directement dans la barre url d'un browser pour faire un GET)

http://localhost:8080/api

//ATTENTION==> Lorsque l'on fait des modifications dans le fichier server.js ne pas oublier de relancer le server avec "node server.js"


//7.)  CrÃ©er notre database et s'y connecter.

//We'll keep this short and sweet so that we can get to the fun part of building the API routes. All we need to do is create a MongoDB database and have our application connect to it. We will also need to create a bear mongoose model so we can use mongoose to interact with our database. 
// We will be using a database provided by Modulus. You can definitely create your own database and use it locally or use the awesome Mongolab. All you really need is a URI like below so that your application can connect.
//Once you have your database created and have the URI to connect to, let's add it to our application. In server.js in the Base Setup section, let's add these two lines. 

// server.js

// BASE SETUP
// =============================================================================

...

var mongoose   = require('mongoose');
mongoose.connect('mongodb://node:node@novus.modulusmongo.net:27017/Iganiq8o'); // connect to our database

...

//ATTENTION==> Lorsque l'on fait des modifications dans le fichier server.js ne pas oublier de relancer le server avec "node server.js"

//That will grab the mongoose package and connect to our remote database hosted by Modulus.


//8.) 




